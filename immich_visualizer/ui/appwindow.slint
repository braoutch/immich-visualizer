import { HorizontalBox, VerticalBox, TextEdit, LineEdit, Button, SpinBox, Switch } from "std-widgets.slint";
import { OneSetting } from "./OneSetting.slint";

component SettingsButton inherits Rectangle {
    callback clicked;

    Image {
        source: @image-url("../resources/settings.png");
        width: parent.width * 0.9;
        height: parent.height * 0.9;
    }

    Rectangle {
        border-radius: 15px;
        width: parent.width;
        height: parent.height;
        opacity: touchArea.has-hover ? 100% : 60%;
        border-width: 1px;
        border-color: touchArea.has-hover ? #505050 : #ffffff00;
        animate background { duration: 50ms; }
        animate opacity { duration: 50ms; }
        background: touchArea.pressed ? #2b2b2b : #3f3d3d;

        z: -1;
    }

    touchArea := TouchArea {

        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

component MemoryTile inherits Rectangle {
    // width: 1280px;
    // height: 720px;
    width: 100%;
    height: 100%;
    background: #000000;

    in-out property <image> image_source;
    in-out property <string> image_text;

    Image {
        source: root.image_source;
        image-fit: contain;
        // width: parent.width;
        height: parent.height;
    }
}

export component MyWindow inherits Window {
    in property <image> image_source;
    in property <string> image_text;
    in-out property <int> click_count;
    in-out property <int> click_count_native;
    in-out property <int> state: -206;
    in-out property <int> duration_value <=> durationImageSettings.spinbox_value;
    in-out property <bool> png_value <=> showPngSettings.switch_value;
    out property <string> thetext: "";
    callback settings-clicked();
    callback image-duration-value-changed();
    callback year-duration-value-changed();
    callback png-settings-changed();

    states [
        main-view when state == 0: {
        // circle1.x: 0px; circle1.y: 40px; circle1.background: green;
            // circle2.x: 0px; circle2.y: 0px; circle2.background: blue;
        }
        settings-view when state == 1: {
        // circle1.x: 170px; circle1.y: 70px; circle1.background: green;
            // circle2.x: 170px; circle2.y: 00px; circle2.background: blue;
        }
    ]

    memoryTile := MemoryTile {
        image_source: root.image_source;
    }

    settingsButtonCustom := SettingsButton {
        x: root.width * 0.93;
        y: parent.height * 0.02 * root.width / root.height;
        width: 5%;
        height: self.width;
        // So that it's a square
        clicked => {
            root.click_count += 1;
            if root.state == 0 {
                root.state = 206;
            } else {
                root.state = -root.state;
            }
            settings-clicked();
        }
    }

    settingsPanel := Rectangle {

        height: 50%;
        width: 50%;
        visible: root.state == 206;
        
        border-radius: 15px;
        background: #363636;
        border-color: #262626;
        drop-shadow-offset-x: 0px;
        drop-shadow-offset-y: 0px;
        drop-shadow-blur: 20px;
        drop-shadow-color: #000000;
        // z: -1;

        VerticalLayout {
            height: 90%;
            width: 90%;
            padding: 5px;
            spacing: 5px;
            alignment: start;
            Text {
                text: "PARAMÈTRES";
                vertical-alignment: top;
                font-size: 50px;
                horizontal-alignment: center;
                color: #ffffff;

                // color (in brush): The color of the text. (default value: depends on the style)
                // font-family (in string): The name of the font family selected for rendering the text.
                // font-size (in length): The font size of the text.
                // font-weight (in int): The weight of the font. The values range from 100 (lightest) to 900 (thickest). 400 is the normal weight.
                // font-italic (in bool): Whether or not the font face should be drawn italicized or not. (default value: false)
                // horizontal-alignment (in enum TextHorizontalAlignment): The horizontal alignment of the text.
                // letter-spacing (in length): The letter spacing allows changing the spacing between the glyphs. A positive value increases the spacing and a negative value decreases the distance. (default value: 0)
                // overflow (in enum TextOverflow): What happens when the text overflows (default value: clip).
                // text (in string): The text rendered.
                // vertical-alignment (in enum TextVerticalAlignment): The vertical alignment of the text.
                // wrap (in enum TextWrap): The way the text wraps (default value: no-wrap).

            }

            Rectangle {
                height: 50px;
                opacity: 0%;
            }

            durationYearSettings := OneSetting { 
                title: "Durée par année";
                suffix: "minutes";
                value-changed() => {
                    year-duration-value-changed();
                }
                show_spinbox: true;
            }

            durationImageSettings := OneSetting { 
                title: "Durée par image";
                suffix: "secondes";
                value-changed() => {
                    image-duration-value-changed();
                }
                show_spinbox: true;
            }

            showPngSettings := OneSetting { 
                title: "Afficher les PNG ";
                value-changed() => {
                    png-settings-changed();
                }
                show_switch: true;
            }
        }
    }
}
