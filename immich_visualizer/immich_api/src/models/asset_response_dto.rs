/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.105.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetResponseDto {
    /// base64 encoded sha1 hash
    #[serde(rename = "checksum")]
    pub checksum: String,
    #[serde(rename = "deviceAssetId")]
    pub device_asset_id: String,
    #[serde(rename = "deviceId")]
    pub device_id: String,
    #[serde(rename = "duplicateId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub duplicate_id: Option<Option<String>>,
    #[serde(rename = "duration")]
    pub duration: String,
    #[serde(rename = "exifInfo", skip_serializing_if = "Option::is_none")]
    pub exif_info: Option<Box<models::ExifResponseDto>>,
    #[serde(rename = "fileCreatedAt")]
    pub file_created_at: String,
    #[serde(rename = "fileModifiedAt")]
    pub file_modified_at: String,
    #[serde(rename = "hasMetadata")]
    pub has_metadata: bool,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isArchived")]
    pub is_archived: bool,
    #[serde(rename = "isFavorite")]
    pub is_favorite: bool,
    #[serde(rename = "isOffline")]
    pub is_offline: bool,
    #[serde(rename = "isTrashed")]
    pub is_trashed: bool,
    /// This property was deprecated in v1.106.0
    #[serde(rename = "libraryId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub library_id: Option<Option<String>>,
    #[serde(rename = "livePhotoVideoId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub live_photo_video_id: Option<Option<String>>,
    #[serde(rename = "localDateTime")]
    pub local_date_time: String,
    #[serde(rename = "originalFileName")]
    pub original_file_name: String,
    #[serde(rename = "originalPath")]
    pub original_path: String,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<models::UserResponseDto>>,
    #[serde(rename = "ownerId")]
    pub owner_id: String,
    #[serde(rename = "people", skip_serializing_if = "Option::is_none")]
    pub people: Option<Vec<models::PersonWithFacesResponseDto>>,
    #[serde(rename = "resized")]
    pub resized: bool,
    #[serde(rename = "smartInfo", skip_serializing_if = "Option::is_none")]
    pub smart_info: Option<Box<models::SmartInfoResponseDto>>,
    #[serde(rename = "stack", skip_serializing_if = "Option::is_none")]
    pub stack: Option<Vec<models::AssetResponseDto>>,
    #[serde(rename = "stackCount", deserialize_with = "Option::deserialize")]
    pub stack_count: Option<i32>,
    #[serde(rename = "stackParentId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stack_parent_id: Option<Option<String>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::TagResponseDto>>,
    #[serde(rename = "thumbhash", deserialize_with = "Option::deserialize")]
    pub thumbhash: Option<String>,
    #[serde(rename = "type")]
    pub r#type: models::AssetTypeEnum,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl AssetResponseDto {
    pub fn new(checksum: String, device_asset_id: String, device_id: String, duration: String, file_created_at: String, file_modified_at: String, has_metadata: bool, id: String, is_archived: bool, is_favorite: bool, is_offline: bool, is_trashed: bool, local_date_time: String, original_file_name: String, original_path: String, owner_id: String, resized: bool, stack_count: Option<i32>, thumbhash: Option<String>, r#type: models::AssetTypeEnum, updated_at: String) -> AssetResponseDto {
        AssetResponseDto {
            checksum,
            device_asset_id,
            device_id,
            duplicate_id: None,
            duration,
            exif_info: None,
            file_created_at,
            file_modified_at,
            has_metadata,
            id,
            is_archived,
            is_favorite,
            is_offline,
            is_trashed,
            library_id: None,
            live_photo_video_id: None,
            local_date_time,
            original_file_name,
            original_path,
            owner: None,
            owner_id,
            people: None,
            resized,
            smart_info: None,
            stack: None,
            stack_count,
            stack_parent_id: None,
            tags: None,
            thumbhash,
            r#type,
            updated_at,
        }
    }
}

