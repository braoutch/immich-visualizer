/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.105.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActivityResponseDto {
    #[serde(rename = "assetId", deserialize_with = "Option::deserialize")]
    pub asset_id: Option<String>,
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "user")]
    pub user: Box<models::UserResponseDto>,
}

impl ActivityResponseDto {
    pub fn new(asset_id: Option<String>, created_at: String, id: String, r#type: Type, user: models::UserResponseDto) -> ActivityResponseDto {
        ActivityResponseDto {
            asset_id,
            comment: None,
            created_at,
            id,
            r#type,
            user: Box::new(user),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "comment")]
    Comment,
    #[serde(rename = "like")]
    Like,
}

impl Default for Type {
    fn default() -> Type {
        Self::Comment
    }
}

