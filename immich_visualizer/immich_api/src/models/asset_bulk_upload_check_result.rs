/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.105.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetBulkUploadCheckResult {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "assetId", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
}

impl AssetBulkUploadCheckResult {
    pub fn new(action: Action, id: String) -> AssetBulkUploadCheckResult {
        AssetBulkUploadCheckResult {
            action,
            asset_id: None,
            id,
            reason: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "accept")]
    Accept,
    #[serde(rename = "reject")]
    Reject,
}

impl Default for Action {
    fn default() -> Action {
        Self::Accept
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "duplicate")]
    Duplicate,
    #[serde(rename = "unsupported-format")]
    UnsupportedFormat,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::Duplicate
    }
}

