/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.105.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JobName {
    #[serde(rename = "thumbnailGeneration")]
    ThumbnailGeneration,
    #[serde(rename = "metadataExtraction")]
    MetadataExtraction,
    #[serde(rename = "videoConversion")]
    VideoConversion,
    #[serde(rename = "faceDetection")]
    FaceDetection,
    #[serde(rename = "facialRecognition")]
    FacialRecognition,
    #[serde(rename = "smartSearch")]
    SmartSearch,
    #[serde(rename = "duplicateDetection")]
    DuplicateDetection,
    #[serde(rename = "backgroundTask")]
    BackgroundTask,
    #[serde(rename = "storageTemplateMigration")]
    StorageTemplateMigration,
    #[serde(rename = "migration")]
    Migration,
    #[serde(rename = "search")]
    Search,
    #[serde(rename = "sidecar")]
    Sidecar,
    #[serde(rename = "library")]
    Library,
    #[serde(rename = "notifications")]
    Notifications,

}

impl std::fmt::Display for JobName {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ThumbnailGeneration => write!(f, "thumbnailGeneration"),
            Self::MetadataExtraction => write!(f, "metadataExtraction"),
            Self::VideoConversion => write!(f, "videoConversion"),
            Self::FaceDetection => write!(f, "faceDetection"),
            Self::FacialRecognition => write!(f, "facialRecognition"),
            Self::SmartSearch => write!(f, "smartSearch"),
            Self::DuplicateDetection => write!(f, "duplicateDetection"),
            Self::BackgroundTask => write!(f, "backgroundTask"),
            Self::StorageTemplateMigration => write!(f, "storageTemplateMigration"),
            Self::Migration => write!(f, "migration"),
            Self::Search => write!(f, "search"),
            Self::Sidecar => write!(f, "sidecar"),
            Self::Library => write!(f, "library"),
            Self::Notifications => write!(f, "notifications"),
        }
    }
}

impl Default for JobName {
    fn default() -> JobName {
        Self::ThumbnailGeneration
    }
}

