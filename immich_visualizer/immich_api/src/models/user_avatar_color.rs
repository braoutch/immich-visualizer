/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.105.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UserAvatarColor {
    #[serde(rename = "primary")]
    Primary,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "red")]
    Red,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "purple")]
    Purple,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "gray")]
    Gray,
    #[serde(rename = "amber")]
    Amber,

}

impl std::fmt::Display for UserAvatarColor {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Primary => write!(f, "primary"),
            Self::Pink => write!(f, "pink"),
            Self::Red => write!(f, "red"),
            Self::Yellow => write!(f, "yellow"),
            Self::Blue => write!(f, "blue"),
            Self::Green => write!(f, "green"),
            Self::Purple => write!(f, "purple"),
            Self::Orange => write!(f, "orange"),
            Self::Gray => write!(f, "gray"),
            Self::Amber => write!(f, "amber"),
        }
    }
}

impl Default for UserAvatarColor {
    fn default() -> UserAvatarColor {
        Self::Primary
    }
}

